{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "EC2 Container Service",
  "Metadata": {
    "cfn-lint": {
      "config": {
        "ignore_checks": ["E3002"]
      }
    }
  },
  "Parameters": {
    "VPCStackName": {
      "Description": "The name of the target VPC stack to deploy this ELB into",
      "Type": "String"
    },
    "ServiceName": {
      "Description": "The name of the ECS Service to create",
      "Type": "String"
    },
    "ContainerPort": {
      "Description": "The port to allocate for this container",
      "Type": "Number"
    },
    "ImageUrl": {
      "Description": "The url of a docker image that contains the application process that will handle the traffic for this service",
      "Type": "String"
    },
    "ContainerCpu": {
      "Description": "How much CPU to give the container. 1024 is 1 CPU",
      "Type": "Number"
    },
    "ContainerMemory": {
      "Description": "How much memory in megabytes to give the container",
      "Type": "Number"
    },
    "DesiredCount": {
      "Description": "How many instances of this service do you want to launch",
      "Type": "Number"
    },
    "EnvironmentType": {
      "Description": "Name of the environment to build : demo, development, staging performance or production",
      "Type": "String",
      "Default": "prod",
      "AllowedValues": [
        "core",
        "uat",
        "dev",
        "staging",
        "prod",
        "test",
        "demo",
        "perf",
        "feat1",
        "feat2",
        "feat3",
        "feat4",
        "feat5",
        "feat6"
      ]
    },
    "LaunchType": {
      "AllowedValues": ["EC2", "FARGATE"],
      "Default": "FARGATE",
      "Type": "String",
      "Description": "The launch type for this Service ECS or FARGATE"
    },
    "EnvBucket": {
      "Description": "Bucket For CloudFormation transform snippet. default will look for Buckname in ssm /s3/bucketname/sol/EnvBucket",
      "Type": "String",
      "Default": "{{resolve:ssm:/s3/bucketname/sol/EnvBucket:1}}"
    },
    "RegistryCredential": {
      "Description": "ARN of Docker access key stored in AWS Secrets Manager",
      "Type": "String",
      "Default": ""
    },
    "User": {
      "Description": "UUID/GID of user to to use inside container",
      "Type": "String",
      "Default": ""
    },
    "DeploymentCircuitBreaker": {
      "AllowedValues": ["true", "false"],
      "Default": "true",
      "Type": "String",
      "Description": "Enable deployment circuit breaker to transition service to failed state if container repeatedly fails to start or are failing healthcheck"
    },
    "DeploymentCircuitBreakerRollback": {
      "AllowedValues": ["true", "false"],
      "Default": "false",
      "Type": "String",
      "Description": "Rollback if circuit breaker is tripped"
    },
    "ServiceRegistry": {
      "AllowedValues": ["true", "false"],
      "Default": "false",
      "Type": "String",
      "Description": "Should we create a service registry entry for this service"
    }
  },
  "Conditions": {
    "UseEC2LaunchType": {
      "Fn::Equals": [
        {
          "Ref": "LaunchType"
        },
        "EC2"
      ]
    },
    "UseFargatePlatformVersion": {
      "Fn::Equals": [
        {
          "Ref": "LaunchType"
        },
        "FARGATE"
      ]
    },
    "HasRegistryCredential": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "RegistryCredential"
            },
            ""
          ]
        }
      ]
    },
    "HasUser": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "User"
            },
            ""
          ]
        }
      ]
    },
    "UseBridgeNetworking": {
      "Fn::And": [
        {
          "Condition": "UseEC2LaunchType"
        },
        {
          "Fn::Equals": [
            {
              "Ref": "ServiceRegistry"
            },
            "false"
          ]
        }
      ]
    }
  },
  "Resources": {
    "CloudwatchLogsGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "ECSLogGroup-${AWS::StackName}"
        },
        "RetentionInDays": 14
      }
    },
    "ContainerTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": {
          "Fn::Sub": "${VPCStackName}-${EnvironmentType}-${ServiceName}"
        },
        "Cpu": {
          "Fn::If": [
            "UseEC2LaunchType",
            {
              "Ref": "AWS::NoValue"
            },
            {
              "Ref": "ContainerCpu"
            }
          ]
        },
        "Memory": {
          "Fn::If": [
            "UseEC2LaunchType",
            {
              "Ref": "AWS::NoValue"
            },
            {
              "Ref": "ContainerMemory"
            }
          ]
        },
        "NetworkMode": {
          "Fn::If": ["UseBridgeNetworking", "bridge", "awsvpc"]
        },
        "RequiresCompatibilities": [
          {
            "Fn::If": ["UseEC2LaunchType", "EC2", "FARGATE"]
          }
        ],
        "ContainerDefinitions": [
          {
            "Name": {
              "Fn::Sub": "${ServiceName}-${EnvironmentType}"
            },
            "Cpu": {
              "Ref": "ContainerCpu"
            },
            "Memory": {
              "Ref": "ContainerMemory"
            },
            "Image": {
              "Ref": "ImageUrl"
            },
            "RepositoryCredentials": {
              "Fn::If": [
                "HasRegistryCredential",
                {
                  "CredentialsParameter": {
                    "Ref": "RegistryCredential"
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "User": {
              "Fn::If": [
                "HasUser",
                {
                  "Ref": "User"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "PortMappings": [
              {
                "Fn::If": [
                  "UseBridgeNetworking",
                  {
                    "HostPort": 0,
                    "ContainerPort": {
                      "Ref": "ContainerPort"
                    }
                  },
                  {
                    "ContainerPort": {
                      "Ref": "ContainerPort"
                    }
                  }
                ]
              }
            ],
            "Fn::Transform": {
              "Name": "AWS::Include",
              "Parameters": {
                "Location": {
                  "Ref": "EnvBucket"
                }
              }
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudwatchLogsGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": "ecs-content"
              }
            }
          }
        ]
      }
    },
    "TaskSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "TaskSecurityGroup",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": {
              "Ref": "ContainerPort"
            },
            "IpProtocol": "6",
            "ToPort": {
              "Ref": "ContainerPort"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "sg-task-${EnvironmentType}"
            }
          }
        ]
      }
    },
    "Service": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": { "Fn::Sub": "${VPCStackName}-${EnvironmentType}" },
        "LaunchType": {
          "Ref": "LaunchType"
        },
        "PlatformVersion": {
          "Fn::If": [
            "UseFargatePlatformVersion",
            "1.4.0",
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "DeploymentConfiguration": {
          "DeploymentCircuitBreaker": {
            "Enable": {
              "Ref": "DeploymentCircuitBreaker"
            },
            "Rollback": {
              "Ref": "DeploymentCircuitBreakerRollback"
            }
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 75
        },
        "DesiredCount": {
          "Ref": "DesiredCount"
        },
        "TaskDefinition": {
          "Ref": "ContainerTask"
        }
      }
    }
  },
  "Outputs": {
    "ServiceName": {
      "Value": {
        "Fn::GetAtt": ["Service", "Name"]
      },
      "Description": "The service name",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ServiceName"
        }
      }
    }
  }
}
